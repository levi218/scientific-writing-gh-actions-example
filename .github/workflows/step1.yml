# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.1.0
      - uses: jitterbit/get-changed-files@v1
        id: files
        with:
          format: 'csv'
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: FolderCount
        id: check_folders
        run: |
          folders=()
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.files.outputs.added_modified }}')
          for added_modified_file in "${added_modified_files[@]}"; do
            echo "Do something with this ${added_modified_file}."
            folder=$(echo "${added_modified_file}" | sed 's/\/.*//')
            folders+=("$folder")
          done
          uniqueFolders=()
          while IFS= read -r -d '' x
          do
              uniqueFolders+=("$x")
          done < <(printf "%s\0" "${folders[@]}" | sort -uz)
          echo "${#uniqueFolders[@]}"
          echo ::set-output name=folder_count::${#uniqueFolders[@]}
          echo ::set-output name=folder_name::${uniqueFolders[0]}
      - name: Check file existence
        id: check_files
        run: |
          echo "${{ steps.check_folders.outputs.folder_name }}"
          echo "${{ steps.check_folders.outputs.name }}\/goal.md"
          [ -f "${{ steps.check_folders.outputs.name }}\/goal.md" ]
          file_goal=$?
          echo "$file_goal"
          #file_problem=$(test -f "${{ steps.check_folders.outputs.name }}\/problem.md")
          #file_relevance=$(test -f "${{ steps.check_folders.outputs.name }}\/relevance.md")
          #file_research_object=$(test -f "${{ steps.check_folders.outputs.name }}\/research_object.md")
          #file_research_subject=$(test -f "${{ steps.check_folders.outputs.name }}\/research_subject.md")
          #file_tasks=$(test -f "${{ steps.check_folders.outputs.name }}\/tasks.md")
          echo ::set-output name=file_goal::${file_goal}
          #echo ::set-output name=file_problem::${file_problem}
          #echo ::set-output name=file_relevance::${file_relevance}
          #echo ::set-output name=file_research_object::${file_research_object}
          #echo ::set-output name=file_research_subject::${file_research_subject}
          #echo ::set-output name=file_tasks::${file_tasks}
          #echo ::set-output name=all::$( $file_goal && $file_problem && $file_relevance && $file_research_object && $file_research_subject && $file_tasks )
      - name: Printing
        run: |
          echo "${{ steps.check_files.outputs.file_goal }}"
          # echo "${{ steps.check_files.outputs.file_problem }}"
          # echo "${{ steps.check_files.outputs.file_relevance }}"
          # echo "${{ steps.check_files.outputs.file_research_object }}"
          # echo "${{ steps.check_files.outputs.file_research_subject }}"
          # echo "${{ steps.check_files.outputs.file_tasks }}"
          
          echo "${{ steps.check_folders.outputs.folder_count }}"
          echo "${{ steps.check_files.outputs.files_exists }}"
