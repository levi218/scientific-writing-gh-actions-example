# This is a basic workflow to help you get started with Actions

name: Step 1

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.1.0
      - uses: jitterbit/get-changed-files@v1
        id: files
        with:
          format: 'csv'
          topath: ${{ secrets.GITHUB_TOKEN }}
      - name: FolderCount
        id: check_folders
        run: |
          folders=()
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.files.outputs.added_modified }}')
          for added_modified_file in "${added_modified_files[@]}"; do
            echo "Do something with this ${added_modified_file}."
            folder=$(echo "${added_modified_file}" | sed 's/\/.*//')
            folders+=("$folder")
          done
          uniqueFolders=()
          while IFS= read -r -d '' x
          do
              uniqueFolders+=("$x")
          done < <(printf "%s\0" "${folders[@]}" | sort -uz)
          echo "${#uniqueFolders[@]}"
          echo ::set-output name=folder_count::${#uniqueFolders[@]}
          echo ::set-output name=folder_name::${uniqueFolders[0]}
      - name: Check file existence
        id: check_files
        run: |
          echo "${{ steps.check_folders.outputs.folder_name }}"
          file_goal_path="${{ steps.check_folders.outputs.folder_name }}/goal.md"
          file_problem_path="${{ steps.check_folders.outputs.folder_name }}/problem.md"
          file_relevance_path="${{ steps.check_folders.outputs.folder_name }}/relevance.md"
          file_research_object_path="${{ steps.check_folders.outputs.folder_name }}/research_object.md"
          file_research_subject_path="${{ steps.check_folders.outputs.folder_name }}/research_subject.md"
          file_tasks_path="${{ steps.check_folders.outputs.folder_name }}/tasks.md"

          file_goal=0
          file_problem=0
          file_relevance=0
          file_research_object=0
          file_research_subject=0
          file_tasks=0
          
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.files.outputs.added_modified }}')
          for added_modified_file in "${added_modified_files[@]}"; do
            echo "Do something with this ${added_modified_file}."
            if [ "${added_modified_file}" = "${file_goal_path}" ]; then
              file_goal=1
            fi
            if [ "${added_modified_file}" = "${file_problem_path}" ]; then
              file_problem=1
            fi
            if [ "${added_modified_file}" = "${file_relevance_path}" ]; then
              file_relevance=1
            fi
            if [ "${added_modified_file}" = "${file_research_object_path}" ]; then
              file_research_object=1
            fi
            if [ "${added_modified_file}" = "${file_research_subject_path}" ]; then
              file_research_subject=1
            fi
            if [ "${added_modified_file}" = "${file_tasks_path}" ]; then
              file_tasks=1
            fi
          done
          
          echo ::set-output name=file_goal_path::${file_goal_path}
          echo ::set-output name=file_problem_path::${file_problem_path}
          echo ::set-output name=file_relevance_path::${file_relevance_path}
          echo ::set-output name=file_research_object_path::${file_research_object_path}
          echo ::set-output name=file_research_subject_path::${file_research_subject_path}
          echo ::set-output name=file_tasks_path::${file_tasks_path}
          
          echo ::set-output name=file_goal::${file_goal}
          echo ::set-output name=file_problem::${file_problem}
          echo ::set-output name=file_relevance::${file_relevance}
          echo ::set-output name=file_research_object::${file_research_object}
          echo ::set-output name=file_research_subject::${file_research_subject}
          echo ::set-output name=file_tasks::${file_tasks}
          
          all=0
          if (( file_goal == 1 && file_problem == 1 && file_relevance == 1 && file_research_object == 1 && file_research_subject == 1 && file_tasks == 1 )); then
            all=1
          fi
          
          echo ::set-output name=all::$all
      - name: Read file total length
        id: file_length
        run: |
          total_length=0        
          if (( ${{ steps.check_files.outputs.file_goal }} == 1)); then
            total_length=$(($total_length + $(($(wc -c < "${{ steps.check_files.outputs.file_goal_path }}") +0))))
          fi
          if (( ${{ steps.check_files.outputs.file_problem }} == 1)); then
            total_length=$(($total_length + $(($(wc -c < "${{ steps.check_files.outputs.file_problem_path }}") +0))))
          fi
          if (( ${{ steps.check_files.outputs.file_relevance }} == 1)); then
            total_length=$(($total_length + $(($(wc -c < "${{ steps.check_files.outputs.file_relevance_path }}") +0))))
          fi
          if (( ${{ steps.check_files.outputs.file_research_object }} == 1)); then
            total_length=$(($total_length + $(($(wc -c < "${{ steps.check_files.outputs.file_research_object_path }}") +0))))
          fi
          if (( ${{ steps.check_files.outputs.file_research_subject }} == 1)); then
            total_length=$(($total_length + $(($(wc -c < "${{ steps.check_files.outputs.file_research_subject_path }}") +0))))
          fi
          if (( ${{ steps.check_files.outputs.file_tasks }} == 1)); then
            total_length=$(($total_length + $(($(wc -c < "${{ steps.check_files.outputs.file_tasks_path }}") +0))))
          fi
          echo ::set-output name=total_length::${total_length}
          echo "$total_length"
      - name: Preparing Message
        id: prepare_message
        run: |
          message="**Automatic checkpoint**\n"
          # message for folder check
          message+="Работает только с одним каталогом: "
          if (( ${{ steps.check_folders.outputs.folder_count }} == 1)); then
            message+="✔"
          else
            message+="❌"          
          fi     
          message+="\n"     

          # message for file check
          message+="Присутствуют все необходимые файлы: \n"
          message+="\t\tgoal.md: "
          if (( ${{ steps.check_files.outputs.file_goal }} == 1)); then
            message+="✔"
          else
            message+="❌"          
          fi          
          message+="\n"
          message+="\t\tproblem.md: "
          if (( ${{ steps.check_files.outputs.file_problem }} == 1)); then
            message+="✔"
          else
            message+="❌"          
          fi          
          message+="\n"
          message+="\t\trelevance.md: "
          if (( ${{ steps.check_files.outputs.file_relevance }} == 1)); then
            message+="✔"
          else
            message+="❌"          
          fi          
          message+="\n"
          message+="\t\tresearch_object.md: "
          if (( ${{ steps.check_files.outputs.file_research_object }} == 1)); then
            message+="✔"
          else
            message+="❌"          
          fi          
          message+="\n"
          message+="\t\tresearch_subject.md: "
          if (( ${{ steps.check_files.outputs.file_research_subject }} == 1)); then
            message+="✔"
          else
            message+="❌"          
          fi          
          message+="\n"
          message+="\t\tasks.md: "
          if (( ${{ steps.check_files.outputs.file_tasks }} == 1)); then
            message+="✔"
          else
            message+="❌"          
          fi          
          message+="\n"
          
          # message for file length check
          message+="Сумма длин файлов: ${{ steps.file_length.outputs.total_length }}"
          if (( ${{ steps.file_length.outputs.total_length }} >= 300)); then
            message+="✔"
          else
            message+="❌"          
          fi          
          message_final=$(printf "$message")
          echo ::set-output name=message::${message_final}
      - uses: mshick/add-pr-comment@v1
        with:
          message: ${{ steps.prepare_message.outputs.message }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
          allow-repeats: true # This is the default
